/*this role should be in createUserProfile in user.service.ts but coz this project needs bio, id( to know user has already created profile or not) so we have kept it in role.service.ts */


import { db } from "@/firebaseConfig";
import type { UserRole } from "@/types/types";
import {
  addDoc,
  collection,
  getDocs,
  query,
  where,
} from "firebase/firestore";

const COLLECTION_NAME = "role";


export const createUserRole = async (user: UserRole) => {
  try {
    return await addDoc(collection(db, COLLECTION_NAME), user);
  } catch (err) {
    console.error(err);
  }
};



export const getUserRole = async (id: string) => {
  try {
     /*id of the document auto generated by firestore as mongodb. but as in mondodb id not kept inside key value pair but individually in document. so whenever we create document in collection as createUserRole above does we save id (here id taken from auth user uuid which is generated in inbuilt firebase auth during signup. in creating other document we don't get uuid. signup uuid is generally used it is accessible in each component by context n can send it as parameter to get, delete, update functions.) from doc in key value pair so we can get, update, delete document using saved id. createUserRole saves id where it's used.
     setDoc method can also used to create document where document id is not auto generated by firestore, we need to manually set document id. if used this method getting data will be little different.
     */
    const q = query(collection(db, COLLECTION_NAME), where("id", "==", id));
    const querySnapshot = await getDocs(q);
    
    // Check if any document is found. to get data use this process
    if (!querySnapshot.empty) {
      // return the first document that matches.only one document needed
      const doc = querySnapshot.docs[0]; 
      return doc.data();
    } 
      return null; // No matching user found
  } catch (err) {
    console.error("Failed to fetch user role:", err);
    return null;
  }
};
